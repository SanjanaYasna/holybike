<!doctype html>
<html lang="en">
  <!---
  Renders navbar from shared/navbar + 
  contains map display and will interact with API backend in app/javascript/map_api -->
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" /> <!--these are the map stylesheets-->
  <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
  
  <%= stylesheet_link_tag "constantPageStyle"%>
  <style>
    html, body {
      height: 100%;
      margin: 0;
    }

    .MainFooter {
      position: sticky;
      bottom: 0;
      width: 100%;
    }

    .top-section, .bottom-section {
      max-width: 90%%;
      display: flex;
      justify-content: center;
      align-items: center; 
    }
    /*the container must be positioned relative:*/
    .autocomplete {
      position: relative;
      display: inline-block;
    }

    input {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      padding: 10px;
      font-size: 16px;
    }

    input[type=text] {
      background-color: #f1f1f1;
      width: 100%;
    }

    input[type=submit] {
      background-color: DodgerBlue;
      color: #fff;
      cursor: pointer;
    }
      /*Created with help of W3schools tutorial on autocomplete for css styling*/
    .autocomplete-items {
      position: absolute;
      border: 1px solid #d4d4d4;
      border-bottom: none;
      border-top: none;
      z-index: 99;
      /*position the autocomplete items to be the same width as the container:*/
      top: 100%;
      left: 0;
      right: 0;
    }

    .autocomplete-items div {
      padding: 10px;
      cursor: pointer;
      background-color: #fff; 
      border-bottom: 1px solid #d4d4d4; 
    }

    /*when hovering an item:*/
    .autocomplete-items div:hover {
      background-color: #e9e9e9; 
    }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
      background-color: DodgerBlue !important; 
      color: #ffffff; 
    }

  </style>
</head>

<div id="container">
  <body style="background-color: #464646">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"></script>
    
    <!-- Render the navbar contents at top of every page-->
    <%= render 'shared/navbar' %>
 
    <!-- add something image wise?-->
    <div style="background-color:black;padding:300px;" >
      <%= image_tag 'logo.PNG',class:'cropimg', alt: 'Profile'%>
    </div> 

<!-- Homepage content starts here!-->
    <!--Render index.html.erb in pages with bike rental displays:-->
      <%= render partial: "pages/index", locals: {stations: @stations} %>

  <div style="background-color:black;color:white;padding:40px;" class="section-title flexbox horizontal center">
    </div> 

    <!-- GODZILLA-->
    <div class="flier">      
      <%=link_to (image_tag "bichael.png"), "/surprise" %>
    </div> 

  



  <h1 style="color:white;text-decoration:underline; padding:20px"> Where are you headed to? </h1> 
  <!--Search button-->
<form autocomplete="off"  class="form-inline" style="padding:20px;">
  <div class="autocomplete" style="width:300px;">
    <input id="station" type="text" name="station" placeholder="Church of bike gods...">
  </div>
 
  <%# <%= button_to("Show", :action => "show", :controller => "station")%>
  <button class="btn btn-outline-success" style="width:80px; height:40px;" value = station onclick = "stationredirect(station)" type="submit" >Search</button>
</form>
<br>
<script>

/*redirect to station page when search button is clicked with specific location*/
function stationredirect(station){
  const station_name = document.getElementById("station").value;
  //if station is null, return to homepage
  if (station_name == "") {
    alert("Please enter and select station name.");
  }
  fetch('/stations').
  then(response => response.json()).
  then(stations => {
    //if station name matches, redirect to station.id
    stations.forEach(function(station) {
      if (station.name == station_name) {
        window.location.href = `/stations/${station.id}`;
      }
    });
  });
}
function autocomplete(inp, arr) {
   /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*a array for div creation and listing, b element for adding in matches for display, a and b grow alongside each other*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      this.parentNode.appendChild(a);
      /*iterate over stations*/
      for (i = 0; i < arr.length; i++) {
        console.log(arr[i]);
        /*any substring match is good*/
        if (arr[i].toUpperCase().includes(val.toUpperCase())) {
          b = document.createElement("DIV");
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          b.addEventListener("click", function(e) {
              inp.value = this.getElementsByTagName("input")[0].value;
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });


  function addActive(x) {
    if (!x) return false;
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*pop off child and corrspond iwth autocomplete-items styling*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
 /*listener function every time letter is added to search*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

/*An array containing all the stations*/
var stations = ["Florence Bank Station",
"Florence Center",
"Jackson Street",
"Cooley Dickinson Health Care",
"State St/Mass Central Rail Trail",
"Northampton High School", 
"Village Hill/State Hospital", 
"John M Greene Hall/Smith College",
"Forbes Library",
"Pulaski Park/Downtown",
"Main Street/Court House",
"Northampton Train Station",
"Main Street/Bridge Street",
"YMCA/Childs Park"
];
/*initiate the autocomplete function on station lookup (continuous)*/
autocomplete(document.getElementById("station"), stations);
</script>

 <!-- Leaflet Map View -->
  <div id="map" class="leaflet-container" style="height: 400px;">
    <script>
    document.addEventListener("DOMContentLoaded", function() {
      fetch('/stations') 
        .then(response => response.json())  
        .then(stations => {
            console.log(stations);  
            var map = L.map('map').setView([42.319519, -72.629761], 13);
            // Customize marker https://leafletjs.com/examples/custom-icons/
            var iconURL = "<%= image_path('marker.svg') %>";
            var bikeIcon = L.icon({ 
              iconUrl: iconURL,
              iconSize: [32, 32],
              iconAnchor: [16, 32],
              popupAnchor: [0, -32]
            });
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);
            // Create markers for each station
            stations.forEach(function(station) {
            var markerMenu = `
              <b>${station.name}</b><br>
              <p><a href="/stations/${station.id}" style="color: #007bff;">View Station</a></p>
            `;
            L.marker([station.latitude, station.longitude], {icon: bikeIcon})
                .addTo(map)
                .bindPopup(markerMenu);
            });
        })
      });
      </script>
  </div>

</body>
  <div class="MainFooter">
  <%= render 'shared/footer' %>
  </div>
</div>
</html>
